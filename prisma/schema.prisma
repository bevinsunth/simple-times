generator client {
  provider = "prisma-client-js"
  previewFeatures = ["strictUndefinedChecks"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model st_TimeEntry {
  id          String   @id @default(cuid())
  date        DateTime
  clientId    String
  client      st_Client   @relation(fields: [clientId], references: [id], onDelete: Cascade)
  projectId   String
  project     st_Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)
  hours       Float
  userId      String
  user        st_User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@index([userId])
}

model st_Client {
  id          String      @id @default(uuid())
  name        String
  userId      String
  user        st_User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  projects    st_Project[]
  timeEntries st_TimeEntry[]
}

model st_Project {
  id          String      @id @default(uuid())
  name        String
  clientId    String
  client      st_Client      @relation(fields: [clientId], references: [id], onDelete: Cascade)
  timeEntries st_TimeEntry[]
}

model st_User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  image         String?
  accounts      st_Account[]
  sessions      st_Session[]
  Authenticator st_Authenticator[]

  timeEntries   st_TimeEntry[]
  clients       st_Client[]
}

model st_Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user st_User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

model st_Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         st_User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model st_VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@id([identifier, token])
}

model st_Authenticator {
  credentialID         String  @unique
  userId               String
  providerAccountId    String
  credentialPublicKey  String
  counter              Int
  credentialDeviceType String
  credentialBackedUp   Boolean
  transports           String?

  user st_User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([userId, credentialID])
}